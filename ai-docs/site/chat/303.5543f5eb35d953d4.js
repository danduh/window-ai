"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[303],{5303:(n,e,a)=>{a.r(e),a.d(e,{default:()=>t});const t='# Language Translation API Usage Guide\n\nThis document provides a guide on how to use the `Translation` module from TypeScript code in a JavaScript environment using the configuration described.\n\n## Overview\n\nThe `Translation` API allows for both language detection and text translation. These capabilities are available with specific configurations and flags within Chrome.\n\n## Prerequisites\n\n### Language Detection API\n\n1. **Availability**:\n    - Available from Chrome 129+ on desktop and Android.\n    - Tested on Chrome Canary or Chrome Dev channel, Version 129.0.6639.0 or above.\n\n2. **Requirements**:\n    - No hardware requirements; supported on Android, ChromeOS, Windows, Mac, and Linux (not supported on iOS).\n\n3. **Setup**:\n    - Ensure you are using Chrome on a supported platform.\n    - Download Chrome Canary and confirm the version is 129.0.6639.0 or newer.\n    - Enable Language Detection API:\n        - Navigate to `chrome://flags/#language-detection-api`.\n        - Select `Enabled` and relaunch Chrome.\n    - Confirm API availability:\n        - Open Chrome DevTools and execute `await translation.canDetect();`.\n        - Ensure it returns "readily" to confirm readiness.\n\n### Translation API\n\n1. **Platforms**:\n    - Works on Windows, Mac, or Linux.\n\n2. **Requirements**:\n    - Ensure Chrome version is equal to or newer than 131.0.6778.2.\n\n3. **Enable Translation API**:\n    - Navigate to `chrome://flags/#translation-api`.\n    - Select `Enabled` (or `Enabled without language pack limit` for more languages).\n    - Relaunch Chrome.\n\n4. **Confirm API availability**:\n    - Execute `await translation.canTranslate({sourceLanguage: "en", targetLanguage: "es"});` in DevTools.\n    - Ensure it returns "readily" to confirm readiness.\n\n5. **Manage Language Packs**:\n    - Navigate to `chrome://on-device-translation-internals/` to install/uninstall language packs.\n\n## Using the Translation API\n\n### Language Detection\n\n#### Step 1: Create a Language Detector\n\n```javascript\nasync function createLanguageDetector() {\n  const detector = await window.translation.createDetector();\n\n  detector.ondownloadprogress = function(ev) {\n    console.log(`Download progress: ${ev.loaded} of ${ev.total}`);\n  };\n\n  await detector.ready;\n  return detector;\n}\n```\n\n#### Step 2: Detect Language\n\n```javascript\nasync function detectLanguage(text) {\n  const detector = await createLanguageDetector();\n  const results = await detector.detect(text);\n  results.forEach(result => {\n    console.log(`Detected language: ${result.detectedLanguage} with confidence: ${result.confidence}`);\n  });\n}\n\ndetectLanguage("Your text to detect language goes here.");\n```\n\n### Translation\n\n#### Step 1: Check Translation Availability\n\n```javascript\nasync function checkTranslationAvailability() {\n  const availability = await window.translation.canTranslate({\n    sourceLanguage: "en",\n    targetLanguage: "es"\n  });\n  console.log("Translation Availability:", availability);\n}\n\ncheckTranslationAvailability();\n```\n\n#### Step 2: Create a Translator\n\n```javascript\nasync function createTranslator() {\n  const translator = await window.translation.createTranslator({\n    sourceLanguage: "en",\n    targetLanguage: "es"\n  });\n  return translator;\n}\n```\n\n#### Step 3: Translate Text\n\n```javascript\nasync function translateText(text) {\n  const translator = await createTranslator();\n  const translatedText = await translator.translate(text);\n  console.log("Translated Text:", translatedText);\n}\n\ntranslateText("Your text to translate goes here.");\n```\n\n## Conclusion\n\nThis guide provides you with the necessary steps to utilize the `Language Detection` and `Translation` APIs correctly in your JavaScript projects. Ensure that all prerequisites are met for smooth integration and functionality.'}}]);