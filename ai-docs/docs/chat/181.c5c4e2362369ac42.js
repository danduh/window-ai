"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[181],{181:(e,n,a)=>{a.r(n),a.d(n,{default:()=>i});const i='# AISummarizer Usage Guide\n\nThis document provides a guide on how to use the `AISummarizer` module from TypeScript code in a JavaScript environment.\n\n## Overview\n\n`AISummarizer` is a service that offers AI-based text summarization capabilities with different options for summarization types, lengths, and formats.\n\n## Prerequisites\n\n1. **Acknowledge Google\'s Generative AI Prohibited Uses Policy.**\n\n2. **Download and Install Chrome Canary**:\n   - Ensure your Chrome Canary version is equal to or newer than `129.0.6639.0`.\n\n3. **Check Device Requirements**:\n   - Make sure your device has at least 22 GB of free storage space.\n   - The Gemini Nano model will be deleted if available storage falls below 10 GB post-download.\n   - If you are already using the Prompt API, storage requirements are already met.\n\n4. **Enable Gemini Nano**:\n   - If you haven\'t set up the Prompt API, follow these steps:\n      1. Open Chrome and navigate to `chrome://flags/#optimization-guide-on-device-model`.\n      2. Enable `BypassPerfRequirement`.\n      3. Relaunch Chrome to save changes.\n\n5. **Enable the Summarization API**:\n   - Navigate to `chrome://flags/#summarization-api-for-gemini-nano`.\n   - Enable it for local experimentation.\n   - Relaunch Chrome.\n\n6. **Finalize Setup**:\n   - Open Chrome DevTools and execute `await ai.summarizer.create();` in the console to initiate the model download.\n   - Execute `await ai.summarizer.capabilities();` repeatedly until the response indicates "readily". This process may take 3 to 5 minutes.\n   - If the message reads "The model was available but there was not an execution config available...", you might need to wait a day for configuration updates.\n   - Refer to the troubleshooting section if problems persist.\n\n## Using AISummarizer\n\n### Step 1: Check Capabilities\n\nBefore creating a summarizer session, check the availability of the model.\n\n```javascript\nasync function checkCapabilities() {\n  const capabilities = await window.ai.summarizer.capabilities();\n  console.log("Model Availability:", capabilities.available);\n}\n\ncheckCapabilities();\n```\n\n### Step 2: Create a Summarizer Session\n\nCreate a summarizer session using the appropriate enum values.\n\n```javascript\nasync function createSummarizerSession() {\n  const options = {\n    type: \'tl;dr\',  // Enum value\n    length: \'medium\',  // Enum value\n    format: \'plain-text\'  // Enum value\n  };\n\n  const summarizerSession = await window.ai.summarizer.create(options);\n  return summarizerSession;\n}\n```\n\n### Step 3: Use the Summarizer\n\nOnce you have a session, summarize the text.\n\n```javascript\nasync function summarizeText(text) {\n  const session = await createSummarizerSession();\n\n  // Wait for the session to be ready\n  await session.ready;\n\n  const summary = await session.summarize(text);\n  console.log("Summary:", summary);\n\n  // Clean up\n  session.destroy();\n}\n\nsummarizeText("Your text to be summarized goes here.");\n```\n\n### Handling Download Progress\n\nIf the model requires downloading, handle progress with an event listener.\n\n```javascript\nfunction handleDownloadProgress(prop, event) {\n  console.log(`Property: ${prop}, Loaded: ${event.loaded}, Total: ${event.total}`);\n}\n\nasync function summarizeWithProgress(text) {\n  const session = await createSummarizerSession();\n\n  // Add event listener for download progress\n  session.addEventListener = handleDownloadProgress;\n\n  await session.ready; // Wait for readiness\n  const summary = await session.summarize(text);\n  console.log("Summary:", summary);\n\n  session.destroy();\n}\n\nsummarizeWithProgress("Text to summarize with progress handling.");\n```\n\n'}}]);