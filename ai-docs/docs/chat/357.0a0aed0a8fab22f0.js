"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[357],{1357:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r='# Writer and Rewriter API Documentation\n\n## Overview\n\nThe Writer and Rewriter APIs are part of the built-in AI capabilities in Chrome, allowing users to create and revise content efficiently. The APIs leverage fine-tuned models tailored for specific writing and rewriting tasks.\n\n## Features\n\n- **Writer API**: Create new content based on a given prompt.\n- **Rewriter API**: Revise and restructure existing text.\n- Fine-tuned models providing context-based content generation.\n\n## Goals of the Early Preview\n\n- Gather feedback on text quality.\n- Identify issues in the API\'s implementation in Chrome.\n- Shape the future of the APIs through user feedback.\n\n## Requirements\n\n- Supported Platforms: Desktop (Windows, macOS, Linux)\n- OS Version and Hardware Requirements (specific details omitted for brevity)\n- Current non-support: Chrome for Android, iOS, and ChromeOS\n\n## Setup Instructions\n\n1. **Prerequisites**:\n   - Accept Google\'s Generative AI Prohibited Uses Policy.\n   - Download and install Chrome Canary.\n\n2. **Enable Chrome Flags for Gemini Nano**:\n   - Open a new tab and navigate to `chrome://flags/#optimization-guide-on-device-model`.\n   - Set **Optimization Guide on Device Model** to **Enabled BypassPerfRequirement**.\n   - Relaunch Chrome.\n\n3. **Enable the Writer and Rewriter APIs**:\n   - Enable the **Writer API**:\n     - Go to `chrome://flags/#writer-api-for-gemini-nano`.\n     - Set this flag to **Enabled**.\n   - Enable the **Rewriter API**:\n     - Go to `chrome://flags/#rewriter-api-for-gemini-nano`.\n     - Set this flag to **Enabled**.\n   - Relaunch Chrome after enabling these flags.\n\n4. **Verify Setup**:\n   - Open Chrome DevTools and enter the console command:\n     ```javascript\n     (await ai.languageModel.capabilities()).available;\n     ```\n   - Confirm it returns "readily" to ensure the model is available.\n\n## Writer API\n\n### Purpose\n\nTo generate content based on a specific prompt and writing context.\n\n### Usage\n\n#### Example: Pure JavaScript\n\n```javascript\n(async () => {\n  const writer = await ai.writer.create({\n    tone: "formal",\n    format: "plain-text",\n    length: "medium",\n    sharedContext: "Business email context"\n  });\n\n  const result = await writer.write("Draft an email to request a meeting.");\n  \n  console.log(result);\n\n  writer.destroy(); // Clean up after the operation\n})();\n```\n\n### Available Options\n\n- **Tone**: `formal`, `neutral`, `casual`\n- **Format**: `plain-text`, `markdown`\n- **Length**: `short`, `medium`, `long`\n\n## Rewriter API\n\n### Purpose\n\nTo improve and reorganize existing content intelligently.\n\n### Usage\n\n#### Example: Pure JavaScript\n\n```javascript\n(async () => {\n  const rewriter = await ai.rewriter.create({\n    tone: "more-formal",\n    format: "plain-text",\n    length: "shorter",\n    sharedContext: "Review context"\n  });\n\n  const revisedText = await rewriter.rewrite("I liked the product, but it could be better.");\n\n  console.log(revisedText);\n\n  rewriter.destroy(); // Clean up after the operation\n})();\n```\n\n### Available Options\n\n- **Tone**: `as-is`, `more-formal`, `more-casual`\n- **Format**: `as-is`, `plain-text`, `markdown`\n- **Length**: `as-is`, `shorter`, `longer`\n\n## API Surface\n\n### `AIWriterFactory`\n\n- **create**: Initialize a writer.\n- **capabilities**: Get the capabilities of the writer.\n\n### `AIRewriterFactory`\n\n- **create**: Initialize a rewriter.\n- **capabilities**: Get the capabilities of the rewriter.\n\n### Activation and Feedback\n\n1. **Setup and activation** described in the setup section.\n2. **Feedback**: Provide feedback through the given channels for text quality and implementation issues.\n\n## Changelog\n- Version history detailing updates and changes made to the API.\n\n'}}]);